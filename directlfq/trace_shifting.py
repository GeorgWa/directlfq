# AUTOGENERATED! DO NOT EDIT! File to edit: 03_trace_shifting.ipynb (unless otherwise specified).

__all__ = ['estimate_protein_intensities', 'get_protein_profile_from_shifted_peptides']

# Cell
import pandas as pd
import numpy as np
import directlfq.normalization as lfqnorm

def estimate_protein_intensities(normed_df):
    "derives protein pseudointensities from between-sample normalized data"
    prot_ints = []
    ion_ints = []

    count_prots = 0
    allprots = normed_df.index.get_level_values(0).unique()

    for protein in allprots:
        if(count_prots%100 ==0):
            print(f"prot {count_prots} of {len(allprots)}")
        count_prots+=1

        protvals = pd.DataFrame(normed_df.loc[protein]).to_numpy().copy()#DataFrame definition to avoid pandas Series objects

        summed_pepint = np.nansum(2**protvals)

        if(protvals.shape[1]<2):
            normed_protvals = protvals
        else:
            normed_protvals = lfqnorm.normalize_withincond(protvals)

        ion_ints.extend(normed_protvals)
        scaled_vec = get_protein_profile_from_shifted_peptides(normed_protvals.T, summed_pepint)
        prot_ints.append(scaled_vec)


    protein_df = 2**pd.DataFrame(prot_ints, index = allprots, columns = normed_df.columns)
    protein_df = protein_df.replace(np.nan, 0)
    ion_df = 2**pd.DataFrame(ion_ints, index = normed_df.index, columns = normed_df.columns)
    ion_df = ion_df.replace(np.nan, 0)
    return protein_df, ion_df

# Cell
def get_protein_profile_from_shifted_peptides(sample2reps, summed_pepints):
    intens_vec = []
    for sample_idx in range(len(sample2reps)):
        reps = np.array(sample2reps[sample_idx])
        nonan_elems = sum(~np.isnan(reps))
        if(nonan_elems>=1):
            intens_vec.append(np.nanmedian(reps))
        else:
            intens_vec.append(np.nan)

    intens_vec = np.array(intens_vec)
    intens_conversion_factor = summed_pepints/np.nansum(2**intens_vec)
    scaled_vec = intens_vec+np.log2(intens_conversion_factor)
    return scaled_vec
