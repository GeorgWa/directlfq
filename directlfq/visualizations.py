# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbdev_nbs/05_visualizations.ipynb.

# %% auto 0
__all__ = ['a4_dims', 'a4_width_no_margin', 'AlphaPeptColorMap', 'CmapRegistrator', 'IonTraceCompararisonPlotter',
           'IonTraceCompararisonPlotterNoDirectLFQTrace', 'IonTraceVisualizer', 'MultiOrganismMultiMethodBoxPlot']

# %% ../nbdev_nbs/05_visualizations.ipynb 1
a4_dims = (11.7, 8.27)
a4_width_no_margin = 10.5

# %% ../nbdev_nbs/05_visualizations.ipynb 2
import seaborn as sns
import matplotlib
import matplotlib.cm
import matplotlib.colors
import matplotlib.pyplot as plt

class AlphaPeptColorMap():
    def __init__(self):

        #colorlist = ["#3FC5F0", "#42DEE1", "#7BEDC5", "#FFD479", "#16212B"]
        colorlist = ["#3FC5F0","#16212B", "#FFD479", "#42DEE1", "#7BEDC5" ]
        self.colorlist = [matplotlib.colors.to_rgba(x) for x in colorlist]
        self.colorlist_hex = colorlist
        self.colormap_linear = matplotlib.colors.LinearSegmentedColormap.from_list("alphapept",self.colorlist)
        self.colormap_discrete = matplotlib.colors.LinearSegmentedColormap.from_list("alphapept",self.colorlist, N=5)
        self.seaborn_mapname_linear = None
        self.seaborn_mapname_linear_cut = None
        self._define_linear_seaborn_palettes()
    
    def _define_linear_seaborn_palettes(self):
        cmap_registrator = CmapRegistrator()

        self.seaborn_mapname_linear = "alphapept_linear"
        cmap_registrator.register_colormap(self.seaborn_mapname_linear, self.colorlist)

        self.seaborn_mapname_linear_cut = "alphapept_linear_cut"
        cmap_registrator.register_colormap(self.seaborn_mapname_linear_cut, self.colorlist[:2])
        


class CmapRegistrator():
    def __init__(self):
        self._existing_matplotlib_cmaps = None
        self._define_existing_cmaps()
    
    def _define_existing_cmaps(self):
        self._existing_matplotlib_cmaps = [name for name in plt.colormaps() if not name.endswith('_r')]

    def register_colormap(self, name, colorlist):
        linmap = matplotlib.colors.LinearSegmentedColormap.from_list(name, colorlist)
        matplotlib.cm.register_cmap(name, linmap)
    

# %% ../nbdev_nbs/05_visualizations.ipynb 3
import pandas as pd
import directlfq.normalization as lfq_norm
import directlfq.protein_intensity_estimation as lfq_protint
import matplotlib.pyplot as plt

class IonTraceCompararisonPlotter():
    def __init__(self, proteome_df, selected_protein, axis_unnormed, axis_normed):
        self._proteome_df = proteome_df
        self._selected_protein = selected_protein
        self._protein_df_before_norm = None
        self._protein_df_after_norm = None
        
        self.axis_unnormed = axis_unnormed
        self.axis_normed = axis_normed

        self._prepare_data_and_plot_ion_traces_before_and_after_normalization()

    def _prepare_data_and_plot_ion_traces_before_and_after_normalization(self):
        self._define_protein_dataframes()
        self._plot_before_norm()
        self._plot_after_norm()

    def _define_protein_dataframes(self):
        self._define_protein_df_before_norm()
        self._define_protein_df_after_norm()

    def _define_protein_df_before_norm(self):
        self._protein_df_before_norm = pd.DataFrame(self._proteome_df.loc[self._selected_protein])
        self._protein_df_before_norm = self._protein_df_before_norm.dropna(axis='columns', how='all')
    
    def _define_protein_df_after_norm(self):
        self._protein_df_after_norm = lfq_norm.NormalizationManagerProtein(self._protein_df_before_norm.copy(), num_samples_quadratic = 10).complete_dataframe
        self._protein_df_after_norm = self._protein_df_after_norm.dropna(axis='columns', how='all')

    def _plot_before_norm(self):
        IonTraceVisualizer(self._protein_df_before_norm,ax= self.axis_unnormed)
    
    def _plot_after_norm(self):
        visualizer = IonTraceVisualizer(self._protein_df_after_norm, ax=self.axis_normed)
        median_list = lfq_protint.get_list_with_protein_value_for_each_sample(self._protein_df_after_norm, min_nonan=1)
        visualizer.add_median_trace(median_list)


class IonTraceCompararisonPlotterNoDirectLFQTrace(IonTraceCompararisonPlotter):
    def __init__(self, proteome_df, selected_protein, ax):
        self._proteome_df = proteome_df
        self._selected_protein = selected_protein
        self._protein_df_before_norm = None
        self._protein_df_after_norm = None
        
        self.axis_normed = ax
        
        self._prepare_data_and_plot_ion_traces_before_and_after_normalization()

    
    def _prepare_data_and_plot_ion_traces_before_and_after_normalization(self):
        self._define_protein_dataframes()
        self._plot_after_norm()

    def _plot_after_norm(self):
        visualizer = IonTraceVisualizer(self._protein_df_before_norm, ax=self.axis_normed)

        

# %% ../nbdev_nbs/05_visualizations.ipynb 4
import seaborn as sns
import matplotlib.cm

class IonTraceVisualizer():
    def __init__(self, protein_df, ax):
        self._protein_df = protein_df
        self._plot_df = None
        self._num_samples = None
        self._ax = ax
        self._define_inputs_and_plot_ion_traces()
    
    def _define_inputs_and_plot_ion_traces(self):
        self._define_num_samples()
        self._define_prepared_dataframe()
        self._plot_ion_traces()

    def _define_num_samples(self):
        self._num_samples = len(self._protein_df.columns)

    def _plot_ion_traces(self):
        sns.lineplot(data = self._plot_df, ax=self._ax, legend=None)
        for line in self._ax.lines:
            self._ax.scatter(line.get_xdata(), line.get_ydata(), color='grey', marker = 'o', s = 15)
        #set color of line
        for line in self._ax.lines:
            line.set_color('grey')

        self._ax.set_xticks(range(self._num_samples))
        self._annotate_x_ticks(sample_names=self._protein_df.columns)

    def _define_prepared_dataframe(self):
        self._plot_df = self._protein_df.copy()
        self._plot_df.columns = range(self._num_samples)
        self._plot_df = self._plot_df.T

    def add_median_trace(self, list_of_median_values):
        sns.lineplot(x = range(len(list_of_median_values)), y = list_of_median_values, ax=self._ax,color='black', linewidth=3)
    
    #function that annotates x ticks of an axis with the sample names
    def _annotate_x_ticks(self, sample_names):
        self._ax.set_xticklabels(sample_names, rotation=90)



# %% ../nbdev_nbs/05_visualizations.ipynb 5
import seaborn as sns

class MultiOrganismMultiMethodBoxPlot():
    def __init__(self, method_ratio_results_table, ax, organisms_to_plot, fcs_to_expect):
        self._method_ratio_results_table = method_ratio_results_table
        self._color_scheme = AlphaPeptColorMap()
        self._fcs_to_expect = fcs_to_expect
        self._organisms_to_plot = organisms_to_plot
        
        self.ax = ax

        self.plot_boxplot()
        self._add_expected_fold_changes()

    def plot_boxplot(self):
        color_palette = sns.color_palette(self._color_scheme.colorlist_hex, n_colors=len(self._fcs_to_expect))
        sns.violinplot(data=self._method_ratio_results_table, x="method", y = "log2fc", hue= "organism", palette=color_palette, hue_order=self._organisms_to_plot, ax=self.ax)
    
    def _add_expected_fold_changes(self):
        if self._fcs_to_expect is not None:
            for idx, fc in enumerate(self._fcs_to_expect):
                color = self._color_scheme.colorlist[idx]
                self.ax.axhline(fc, color = color)
    
    
